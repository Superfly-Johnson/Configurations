#+Title: Superfly's GNU Emacs config
#+AUTHOR: Superfly Johnson
#+DESCRIPTION: Superfly's personal Emacs config.
#+STARTUP: showeverything
#+auto_tangle: t

* TABLE OF CONTENTS                                                   :TOC_2:
- [[#description][Description]]
- [[#important-put-this-in-your-initel][IMPORTANT: Put this in your init.el]]
- [[#installation][Installation]]
- [[#requirements][Requirements]]
  - [[#package-archives][Package Archives]]
  - [[#use-package][Use-Package]]
- [[#theming][Theming]]
- [[#org-mode][Org-mode]]
  - [[#tables-of-content][Tables of Content]]
  - [[#auto-tangle][Auto-Tangle]]
- [[#miscellaneous][Miscellaneous]]
  - [[#magit][Magit]]
- [[#customization][Customization]]
  - [[#evil-mode][EVIL mode]]
  - [[#electricicity][Electricicity]]
- [[#additional-code-modes][Additional Code Modes]]
  - [[#nix-mode][Nix-Mode]]

* Description
This is my personal GNU Emacs configuration. It comes with a little install script that I use when installing on a new machine.
* IMPORTANT: Put this in your init.el
#+BEGIN_SRC emacs-lisp :tangle init.el
(org-babel-load-file
 (expand-file-name
  "config.org"
  user-emacs-directory))
#+END_SRC

* Installation
To install the new configuration, simply execute ./install.sh.
#+BEGIN_SRC sh :tangle install.sh :shebang "#!/bin/sh" :tangle-mode (identity #o700)
  EMACSDIR="$HOME/.emacs.d"
  if [[ ! -d ${EMACSDIR} ]]
  then
    echo "${EMACSDIR} doesn't exist. Creating it..."
    mkdir ${EMACSDIR}
  fi
  for f in init.el config.org; 
    do echo "Copying ${f} to ${EMACSDIR}/${f}";
    cp -pf ${f} $EMACSDIR/${f};
  done
#+END_SRC

* Requirements
The configuration has some dependencies. This section is dedicated to that.

** Package Archives
This adds MELPA to our package archives

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+END_SRC

** Use-Package
We use "use-package" to set depdencies and configure modules more easily. ":ensure t" globally makes it so that packages within "use-package" keywords are automatically installed if they are missing.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (setq use-package-always-ensure t)
#+END_SRC

* Theming
This section is reserved for theming, if we ever add some.
#+BEGIN_SRC emacs-lisp
#+END_SRC

* Org-mode
** Tables of Content
I use toc-org to automatically generate tables of content in Emacs org-mode.
#+BEGIN_SRC emacs-lisp
(use-package toc-org
  :ensure t
  :after org
  :hook (org-mode . toc-org-mode)
)
#+END_SRC
** Auto-Tangle
#+BEGIN_SRC emacs-lisp
(use-package org-auto-tangle
  :ensure t
  :after org
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
)
#+END_SRC
* Miscellaneous
** Magit
Magit is a git integration within emacs.
#+BEGIN_SRC emacs-lisp
(use-package magit
:ensure t)
#+END_SRC
* Customization
This section is dedicated to the changes of how emacs behaves
** EVIL mode
EVIL is an extensible 'vi' emulation for emacs. Vi keybinds are universal and are generally useful when ssh-ing into remote machines, so I use them within my .emacs file so I do not forget them.

#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  (evil-mode)
  :config
  (setq evil-want-keybinding nil)
  )
#+END_SRC

*** EVIL collection
EVIL collection is a collection of contributed packages that evil-ify various emacs packages.
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+END_SRC
** [#B] Electricicity
*** Electric pair
#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
#+END_SRC
*** Electric indent
#+BEGIN_SRC
(electric-indent-mode 0)
#+END_SRC

* Additional Code Modes
This section is reserved for syntactical modes that emacs doesn't contain by default.

** Nix-Mode
#+BEGIN_SRC emacs-lisp
(use-package nix-mode
  :mode "\\.nix\\'")
#+END_SRC

