#+TITLE: Superfly's NixOS configuration
#+AUTHOR: Superfly Johnson
#+DESCRIPTION: Superfly's personal NixOS configuration
#+STARTUP: showeverything
#+PROPERTY: header-args :tangle configuration.nix
#+NAME: configuration.nix
#+auto_tangle: t

* TABLE OF CONTENTS :TOC_2:
- [[#dependencies][Dependencies]]
- [[#hardware-configuration][Hardware configuration]]
- [[#boot][Boot]]
- [[#networking][Networking]]
- [[#region-and-locale][Region and locale]]
- [[#gui-configuration][GUI Configuration]]
- [[#services][Services]]
  - [[#audio][Audio]]
  - [[#emacs][Emacs]]
  - [[#flatpak][Flatpak]]
  - [[#security][Security]]
  - [[#syncthing][Syncthing]]
- [[#user-accounts][User accounts]]
  - [[#private-accounts][Private accounts]]
- [[#system-packages][System packages]]
- [[#state-version][State version]]
- [[#install-script][Install script]]

* Dependencies                                               
#+BEGIN_SRC nix
  { config, pkgs, callPackage, ... }:

  {
#+END_SRC

* Hardware configuration
** Default
Do NOT modify this part hardware configuration
#+BEGIN_SRC nix 
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
    ];
#+END_SRC

** Nvidia
  #+begin_src nix 
  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  services.xserver.videoDrivers = [ "nvidia" ];
  hardware.opengl.enable = true;
  hardware.nvidia.package = config.boot.kernelPackages.nvidiaPackages.stable;
  #+end_src
* Boot
This section contains everything related to the boot process that is
not hardware specific
  #+BEGIN_SRC nix
  # Bootloader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;
  boot.loader.efi.efiSysMountPoint = "/boot/efi";

  # Setup keyfile
  boot.initrd.secrets = {
    "/crypto_keyfile.bin" = null;
  };

  # Enable swap on luks
  boot.initrd.luks.devices."luks-feba7f47-5c04-4c44-85d4-bc84b0e6296e".device = "/dev/disk/by-uuid/feba7f47-5c04-4c44-85d4-bc84b0e6296e";
  boot.initrd.luks.devices."luks-feba7f47-5c04-4c44-85d4-bc84b0e6296e".keyFile = "/crypto_keyfile.bin";
  #+END_SRC
* Networking 
#+BEGIN_SRC nix
    networking.hostName = "GameTop"; 
    networking.networkmanager.enable = true;
#+END_SRC

* Region and locale
This section contains everything related to the region and locale.
#+BEGIN_SRC nix
    time.timeZone = "America/Montreal";
    i18n.defaultLocale = "fr_CA.UTF-8";

    i18n.extraLocaleSettings = 
    {
	LC_MESSAGES = "en_US.UTF-8";
    };
#+END_SRC

* GUI Configuration
** X11
  #+begin_src nix 
  services.xserver.enable = true;
  #+end_src
** Displaymanager
#+begin_src nix
  services.xserver.displayManager.sddm.enable = true;
  services.xserver.displayManager.autoLogin.enable = true;
  services.xserver.displayManager.autoLogin.user = "superfly";
#+end_src
** Desktop Environment (KDE)
  #+begin_src nix
  services.xserver.desktopManager.plasma5.enable = true;
  #+end_src
* Services
This section is reserved for the various daemons I use on my linux systems.
** Audio
I like to use pipewire for my audio setup. It's a more streamlined, universal interface for linux audio and by far the best out there.
#+BEGIN_SRC nix
    services.pipewire = {
      enable = true;
      alsa.enable = true;
      pulse.enable = true;
      jack.enable = true;
    };
#+END_SRC
** Flatpak
I use flatpak as a third party repository for proprietary applications, for instance Discord. 
#+BEGIN_SRC nix
    # Enable Flatpak
    services.flatpak.enable = true;
    xdg.portal.enable = true;
#+END_SRC
** Security
#+BEGIN_SRC nix
    security.polkit.enable = true;
    security.rtkit.enable = true;
#+END_SRC
* User accounts
This section is reserved for user accounts.
** Private accounts
#+BEGIN_SRC nix
  users.users.superfly = {
      isNormalUser = true;
      extraGroups = [ "wheel" "syncthing" ]; 
  };
#+END_SRC
* Nix special configurations
** Allowed user
These users are allowed to run nix commands without being root
#+begin_src nix
 nix.allowedUsers = [ "superfly" ];
#+end_src
* System packages
** SSH
#+BEGIN_SRC nix
  programs.ssh = {
    startAgent = true;
  };
#+END_SRC
* State version
References to the initial version that was installed. 
#+BEGIN_SRC nix
    system.stateVersion = "22.04"; 
  }
#+END_SRC
* Install script
To install the software, simply run in the terminal
#+BEGIN_EXAMPLE sh
sudo ./install.sh
#+END_EXAMPLE

#+BEGIN_SRC sh :tangle install.sh :shebang "#!/bin/sh" :tangle-mode (identity #o755)
  for i in ./*.nix; do
  echo "Copying ${i} to /etc/nixos..."
  cp ${i} /etc/nixos/
  echo "Switching Nix' configuration..."
  nixos-rebuild switch
  done
#+END_SRC
